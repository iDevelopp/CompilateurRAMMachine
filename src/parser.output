Rules useless in parser due to conflicts

   22 INST: EXP SEP

   29 AFFECTATION: ID "<-" EXP SEP


State 90 conflicts: 1 shift/reduce
State 100 conflicts: 1 shift/reduce


Grammar

    0 $accept: PROGRAMME_ALGO $end

    1 PROGRAMME_ALGO: DECLA_GBL PROG

    2 PROG: PROGRAMME '(' ')' SEP LIST_DECLA_VAR DEBUT SEP LIST_INSTS FIN EOP

    3 SEP: '\n'
    4    | SEP '\n'

    5 EOP: ε
    6    | SEP

    7 L_PARAM: ε
    8        | LIST_ID

    9 DECLA_GBL: ε
   10          | DECLA_VAR DECLA_GBL
   11          | DECLA_FCT DECLA_GBL

   12 DECLA_FCT: ALGO ID '(' L_PARAM ')' SEP LIST_DECLA_VAR DEBUT SEP LIST_INSTS FIN SEP

   13 LIST_DECLA_VAR: ε
   14               | DECLA_VAR LIST_DECLA_VAR

   15 DECLA_VAR: VAR LIST_ID SEP

   16 LIST_ID: ID
   17        | ID ',' LIST_ID
   18        | ID "<-" EXP
   19        | ID "<-" EXP ',' LIST_ID

   20 LIST_INSTS: INST SEP
   21           | INST SEP LIST_INSTS

   22 INST: EXP SEP
   23     | BOUCLE
   24     | COND
   25     | AFFECTATION

   26 BOUCLE: TQ EXP FAIRE LIST_INSTS FTQ

   27 COND: SI EXP ALORS LIST_INSTS SINON LIST_INSTS FSI
   28     | SI EXP ALORS LIST_INSTS FSI

   29 AFFECTATION: ID "<-" EXP SEP
   30            | ID "<-" AFFECTATION

   31 EXP: NB
   32    | EXP '+' EXP
   33    | EXP '-' EXP
   34    | EXP '*' EXP
   35    | EXP '/' EXP
   36    | EXP '%' EXP
   37    | EXP '<' EXP
   38    | EXP '>' EXP
   39    | EXP INF_EQ EXP
   40    | EXP SUP_EQ EXP
   41    | EXP DIFT EXP
   42    | EXP ET EXP
   43    | EXP OU EXP
   44    | NON EXP
   45    | '(' EXP ')'
   46    | ID
   47    | B_TRUE
   48    | B_FALSE
   49    | LIRE
   50    | ECRIRE


Terminals, with rules where they appear

    $end (0) 0
    '\n' (10) 3 4
    '%' (37) 36
    '(' (40) 2 12 45
    ')' (41) 2 12 45
    '*' (42) 34
    '+' (43) 32
    ',' (44) 17 19
    '-' (45) 33
    '/' (47) 35
    '<' (60) 37
    '>' (62) 38
    error (256)
    NB <nb> (258) 31
    ID <id> (259) 12 16 17 18 19 29 30 46
    DEBUT (260) 2 12
    FIN (261) 2 12
    VAR (262) 15
    SI (263) 27 28
    ALORS (264) 27 28
    SINON (265) 27
    FSI (266) 27 28
    TQ (267) 26
    FAIRE (268) 26
    FTQ (269) 26
    "<-" (270) 18 19 29 30
    ALGO (271) 12
    INF_EQ (272) 39
    SUP_EQ (273) 40
    PROGRAMME (274) 2
    B_TRUE (275) 47
    B_FALSE (276) 48
    LIRE (277) 49
    ECRIRE (278) 50
    DIFT (279) 41
    ET (280) 42
    OU (281) 43
    NON (282) 44


Nonterminals, with rules where they appear

    $accept (39)
        on left: 0
    PROGRAMME_ALGO <arbre> (40)
        on left: 1
        on right: 0
    PROG <arbre> (41)
        on left: 2
        on right: 1
    SEP (42)
        on left: 3 4
        on right: 2 4 6 12 15 20 21 22 29
    EOP (43)
        on left: 5 6
        on right: 2
    L_PARAM <arbre> (44)
        on left: 7 8
        on right: 12
    DECLA_GBL <arbre> (45)
        on left: 9 10 11
        on right: 1 10 11
    DECLA_FCT <arbre> (46)
        on left: 12
        on right: 11
    LIST_DECLA_VAR <arbre> (47)
        on left: 13 14
        on right: 2 12 14
    DECLA_VAR <arbre> (48)
        on left: 15
        on right: 10 14
    LIST_ID <arbre> (49)
        on left: 16 17 18 19
        on right: 8 15 17 19
    LIST_INSTS <arbre> (50)
        on left: 20 21
        on right: 2 12 21 26 27 28
    INST <arbre> (51)
        on left: 22 23 24 25
        on right: 20 21
    BOUCLE <arbre> (52)
        on left: 26
        on right: 23
    COND <arbre> (53)
        on left: 27 28
        on right: 24
    AFFECTATION <arbre> (54)
        on left: 29 30
        on right: 25 30
    EXP <arbre> (55)
        on left: 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
        on right: 18 19 22 26 27 28 29 32 33 34 35 36 37 38 39 40 41 42 43 44 45


State 0

    0 $accept: • PROGRAMME_ALGO $end

    VAR   shift, and go to state 1
    ALGO  shift, and go to state 2

    $default  reduce using rule 9 (DECLA_GBL)

    PROGRAMME_ALGO  go to state 3
    DECLA_GBL       go to state 4
    DECLA_FCT       go to state 5
    DECLA_VAR       go to state 6


State 1

   15 DECLA_VAR: VAR • LIST_ID SEP

    ID  shift, and go to state 7

    LIST_ID  go to state 8


State 2

   12 DECLA_FCT: ALGO • ID '(' L_PARAM ')' SEP LIST_DECLA_VAR DEBUT SEP LIST_INSTS FIN SEP

    ID  shift, and go to state 9


State 3

    0 $accept: PROGRAMME_ALGO • $end

    $end  shift, and go to state 10


State 4

    1 PROGRAMME_ALGO: DECLA_GBL • PROG

    PROGRAMME  shift, and go to state 11

    PROG  go to state 12


State 5

   11 DECLA_GBL: DECLA_FCT • DECLA_GBL

    VAR   shift, and go to state 1
    ALGO  shift, and go to state 2

    $default  reduce using rule 9 (DECLA_GBL)

    DECLA_GBL  go to state 13
    DECLA_FCT  go to state 5
    DECLA_VAR  go to state 6


State 6

   10 DECLA_GBL: DECLA_VAR • DECLA_GBL

    VAR   shift, and go to state 1
    ALGO  shift, and go to state 2

    $default  reduce using rule 9 (DECLA_GBL)

    DECLA_GBL  go to state 14
    DECLA_FCT  go to state 5
    DECLA_VAR  go to state 6


State 7

   16 LIST_ID: ID •  [')', '\n']
   17        | ID • ',' LIST_ID
   18        | ID • "<-" EXP
   19        | ID • "<-" EXP ',' LIST_ID

    "<-"  shift, and go to state 15
    ','   shift, and go to state 16

    $default  reduce using rule 16 (LIST_ID)


State 8

   15 DECLA_VAR: VAR LIST_ID • SEP

    '\n'  shift, and go to state 17

    SEP  go to state 18


State 9

   12 DECLA_FCT: ALGO ID • '(' L_PARAM ')' SEP LIST_DECLA_VAR DEBUT SEP LIST_INSTS FIN SEP

    '('  shift, and go to state 19


State 10

    0 $accept: PROGRAMME_ALGO $end •

    $default  accept


State 11

    2 PROG: PROGRAMME • '(' ')' SEP LIST_DECLA_VAR DEBUT SEP LIST_INSTS FIN EOP

    '('  shift, and go to state 20


State 12

    1 PROGRAMME_ALGO: DECLA_GBL PROG •

    $default  reduce using rule 1 (PROGRAMME_ALGO)


State 13

   11 DECLA_GBL: DECLA_FCT DECLA_GBL •

    $default  reduce using rule 11 (DECLA_GBL)


State 14

   10 DECLA_GBL: DECLA_VAR DECLA_GBL •

    $default  reduce using rule 10 (DECLA_GBL)


State 15

   18 LIST_ID: ID "<-" • EXP
   19        | ID "<-" • EXP ',' LIST_ID

    NB       shift, and go to state 21
    ID       shift, and go to state 22
    B_TRUE   shift, and go to state 23
    B_FALSE  shift, and go to state 24
    LIRE     shift, and go to state 25
    ECRIRE   shift, and go to state 26
    '('      shift, and go to state 27
    NON      shift, and go to state 28

    EXP  go to state 29


State 16

   17 LIST_ID: ID ',' • LIST_ID

    ID  shift, and go to state 7

    LIST_ID  go to state 30


State 17

    3 SEP: '\n' •

    $default  reduce using rule 3 (SEP)


State 18

    4 SEP: SEP • '\n'
   15 DECLA_VAR: VAR LIST_ID SEP •  [DEBUT, VAR, ALGO, PROGRAMME]

    '\n'  shift, and go to state 31

    $default  reduce using rule 15 (DECLA_VAR)


State 19

   12 DECLA_FCT: ALGO ID '(' • L_PARAM ')' SEP LIST_DECLA_VAR DEBUT SEP LIST_INSTS FIN SEP

    ID  shift, and go to state 7

    $default  reduce using rule 7 (L_PARAM)

    L_PARAM  go to state 32
    LIST_ID  go to state 33


State 20

    2 PROG: PROGRAMME '(' • ')' SEP LIST_DECLA_VAR DEBUT SEP LIST_INSTS FIN EOP

    ')'  shift, and go to state 34


State 21

   31 EXP: NB •

    $default  reduce using rule 31 (EXP)


State 22

   46 EXP: ID •

    $default  reduce using rule 46 (EXP)


State 23

   47 EXP: B_TRUE •

    $default  reduce using rule 47 (EXP)


State 24

   48 EXP: B_FALSE •

    $default  reduce using rule 48 (EXP)


State 25

   49 EXP: LIRE •

    $default  reduce using rule 49 (EXP)


State 26

   50 EXP: ECRIRE •

    $default  reduce using rule 50 (EXP)


State 27

   45 EXP: '(' • EXP ')'

    NB       shift, and go to state 21
    ID       shift, and go to state 22
    B_TRUE   shift, and go to state 23
    B_FALSE  shift, and go to state 24
    LIRE     shift, and go to state 25
    ECRIRE   shift, and go to state 26
    '('      shift, and go to state 27
    NON      shift, and go to state 28

    EXP  go to state 35


State 28

   44 EXP: NON • EXP

    NB       shift, and go to state 21
    ID       shift, and go to state 22
    B_TRUE   shift, and go to state 23
    B_FALSE  shift, and go to state 24
    LIRE     shift, and go to state 25
    ECRIRE   shift, and go to state 26
    '('      shift, and go to state 27
    NON      shift, and go to state 28

    EXP  go to state 36


State 29

   18 LIST_ID: ID "<-" EXP •  [')', '\n']
   19        | ID "<-" EXP • ',' LIST_ID
   32 EXP: EXP • '+' EXP
   33    | EXP • '-' EXP
   34    | EXP • '*' EXP
   35    | EXP • '/' EXP
   36    | EXP • '%' EXP
   37    | EXP • '<' EXP
   38    | EXP • '>' EXP
   39    | EXP • INF_EQ EXP
   40    | EXP • SUP_EQ EXP
   41    | EXP • DIFT EXP
   42    | EXP • ET EXP
   43    | EXP • OU EXP

    INF_EQ  shift, and go to state 37
    SUP_EQ  shift, and go to state 38
    '+'     shift, and go to state 39
    '-'     shift, and go to state 40
    '*'     shift, and go to state 41
    '/'     shift, and go to state 42
    '%'     shift, and go to state 43
    DIFT    shift, and go to state 44
    '<'     shift, and go to state 45
    '>'     shift, and go to state 46
    ET      shift, and go to state 47
    OU      shift, and go to state 48
    ','     shift, and go to state 49

    $default  reduce using rule 18 (LIST_ID)


State 30

   17 LIST_ID: ID ',' LIST_ID •

    $default  reduce using rule 17 (LIST_ID)


State 31

    4 SEP: SEP '\n' •

    $default  reduce using rule 4 (SEP)


State 32

   12 DECLA_FCT: ALGO ID '(' L_PARAM • ')' SEP LIST_DECLA_VAR DEBUT SEP LIST_INSTS FIN SEP

    ')'  shift, and go to state 50


State 33

    8 L_PARAM: LIST_ID •

    $default  reduce using rule 8 (L_PARAM)


State 34

    2 PROG: PROGRAMME '(' ')' • SEP LIST_DECLA_VAR DEBUT SEP LIST_INSTS FIN EOP

    '\n'  shift, and go to state 17

    SEP  go to state 51


State 35

   32 EXP: EXP • '+' EXP
   33    | EXP • '-' EXP
   34    | EXP • '*' EXP
   35    | EXP • '/' EXP
   36    | EXP • '%' EXP
   37    | EXP • '<' EXP
   38    | EXP • '>' EXP
   39    | EXP • INF_EQ EXP
   40    | EXP • SUP_EQ EXP
   41    | EXP • DIFT EXP
   42    | EXP • ET EXP
   43    | EXP • OU EXP
   45    | '(' EXP • ')'

    INF_EQ  shift, and go to state 37
    SUP_EQ  shift, and go to state 38
    '+'     shift, and go to state 39
    '-'     shift, and go to state 40
    '*'     shift, and go to state 41
    '/'     shift, and go to state 42
    '%'     shift, and go to state 43
    ')'     shift, and go to state 52
    DIFT    shift, and go to state 44
    '<'     shift, and go to state 45
    '>'     shift, and go to state 46
    ET      shift, and go to state 47
    OU      shift, and go to state 48


State 36

   32 EXP: EXP • '+' EXP
   33    | EXP • '-' EXP
   34    | EXP • '*' EXP
   35    | EXP • '/' EXP
   36    | EXP • '%' EXP
   37    | EXP • '<' EXP
   38    | EXP • '>' EXP
   39    | EXP • INF_EQ EXP
   40    | EXP • SUP_EQ EXP
   41    | EXP • DIFT EXP
   42    | EXP • ET EXP
   43    | EXP • OU EXP
   44    | NON EXP •  [ALORS, FAIRE, INF_EQ, SUP_EQ, '+', '-', '*', '/', '%', ')', DIFT, '<', '>', ET, OU, '\n', ',']

    $default  reduce using rule 44 (EXP)


State 37

   39 EXP: EXP INF_EQ • EXP

    NB       shift, and go to state 21
    ID       shift, and go to state 22
    B_TRUE   shift, and go to state 23
    B_FALSE  shift, and go to state 24
    LIRE     shift, and go to state 25
    ECRIRE   shift, and go to state 26
    '('      shift, and go to state 27
    NON      shift, and go to state 28

    EXP  go to state 53


State 38

   40 EXP: EXP SUP_EQ • EXP

    NB       shift, and go to state 21
    ID       shift, and go to state 22
    B_TRUE   shift, and go to state 23
    B_FALSE  shift, and go to state 24
    LIRE     shift, and go to state 25
    ECRIRE   shift, and go to state 26
    '('      shift, and go to state 27
    NON      shift, and go to state 28

    EXP  go to state 54


State 39

   32 EXP: EXP '+' • EXP

    NB       shift, and go to state 21
    ID       shift, and go to state 22
    B_TRUE   shift, and go to state 23
    B_FALSE  shift, and go to state 24
    LIRE     shift, and go to state 25
    ECRIRE   shift, and go to state 26
    '('      shift, and go to state 27
    NON      shift, and go to state 28

    EXP  go to state 55


State 40

   33 EXP: EXP '-' • EXP

    NB       shift, and go to state 21
    ID       shift, and go to state 22
    B_TRUE   shift, and go to state 23
    B_FALSE  shift, and go to state 24
    LIRE     shift, and go to state 25
    ECRIRE   shift, and go to state 26
    '('      shift, and go to state 27
    NON      shift, and go to state 28

    EXP  go to state 56


State 41

   34 EXP: EXP '*' • EXP

    NB       shift, and go to state 21
    ID       shift, and go to state 22
    B_TRUE   shift, and go to state 23
    B_FALSE  shift, and go to state 24
    LIRE     shift, and go to state 25
    ECRIRE   shift, and go to state 26
    '('      shift, and go to state 27
    NON      shift, and go to state 28

    EXP  go to state 57


State 42

   35 EXP: EXP '/' • EXP

    NB       shift, and go to state 21
    ID       shift, and go to state 22
    B_TRUE   shift, and go to state 23
    B_FALSE  shift, and go to state 24
    LIRE     shift, and go to state 25
    ECRIRE   shift, and go to state 26
    '('      shift, and go to state 27
    NON      shift, and go to state 28

    EXP  go to state 58


State 43

   36 EXP: EXP '%' • EXP

    NB       shift, and go to state 21
    ID       shift, and go to state 22
    B_TRUE   shift, and go to state 23
    B_FALSE  shift, and go to state 24
    LIRE     shift, and go to state 25
    ECRIRE   shift, and go to state 26
    '('      shift, and go to state 27
    NON      shift, and go to state 28

    EXP  go to state 59


State 44

   41 EXP: EXP DIFT • EXP

    NB       shift, and go to state 21
    ID       shift, and go to state 22
    B_TRUE   shift, and go to state 23
    B_FALSE  shift, and go to state 24
    LIRE     shift, and go to state 25
    ECRIRE   shift, and go to state 26
    '('      shift, and go to state 27
    NON      shift, and go to state 28

    EXP  go to state 60


State 45

   37 EXP: EXP '<' • EXP

    NB       shift, and go to state 21
    ID       shift, and go to state 22
    B_TRUE   shift, and go to state 23
    B_FALSE  shift, and go to state 24
    LIRE     shift, and go to state 25
    ECRIRE   shift, and go to state 26
    '('      shift, and go to state 27
    NON      shift, and go to state 28

    EXP  go to state 61


State 46

   38 EXP: EXP '>' • EXP

    NB       shift, and go to state 21
    ID       shift, and go to state 22
    B_TRUE   shift, and go to state 23
    B_FALSE  shift, and go to state 24
    LIRE     shift, and go to state 25
    ECRIRE   shift, and go to state 26
    '('      shift, and go to state 27
    NON      shift, and go to state 28

    EXP  go to state 62


State 47

   42 EXP: EXP ET • EXP

    NB       shift, and go to state 21
    ID       shift, and go to state 22
    B_TRUE   shift, and go to state 23
    B_FALSE  shift, and go to state 24
    LIRE     shift, and go to state 25
    ECRIRE   shift, and go to state 26
    '('      shift, and go to state 27
    NON      shift, and go to state 28

    EXP  go to state 63


State 48

   43 EXP: EXP OU • EXP

    NB       shift, and go to state 21
    ID       shift, and go to state 22
    B_TRUE   shift, and go to state 23
    B_FALSE  shift, and go to state 24
    LIRE     shift, and go to state 25
    ECRIRE   shift, and go to state 26
    '('      shift, and go to state 27
    NON      shift, and go to state 28

    EXP  go to state 64


State 49

   19 LIST_ID: ID "<-" EXP ',' • LIST_ID

    ID  shift, and go to state 7

    LIST_ID  go to state 65


State 50

   12 DECLA_FCT: ALGO ID '(' L_PARAM ')' • SEP LIST_DECLA_VAR DEBUT SEP LIST_INSTS FIN SEP

    '\n'  shift, and go to state 17

    SEP  go to state 66


State 51

    2 PROG: PROGRAMME '(' ')' SEP • LIST_DECLA_VAR DEBUT SEP LIST_INSTS FIN EOP
    4 SEP: SEP • '\n'

    VAR   shift, and go to state 1
    '\n'  shift, and go to state 31

    $default  reduce using rule 13 (LIST_DECLA_VAR)

    LIST_DECLA_VAR  go to state 67
    DECLA_VAR       go to state 68


State 52

   45 EXP: '(' EXP ')' •

    $default  reduce using rule 45 (EXP)


State 53

   32 EXP: EXP • '+' EXP
   33    | EXP • '-' EXP
   34    | EXP • '*' EXP
   35    | EXP • '/' EXP
   36    | EXP • '%' EXP
   37    | EXP • '<' EXP
   38    | EXP • '>' EXP
   39    | EXP • INF_EQ EXP
   39    | EXP INF_EQ EXP •  [ALORS, FAIRE, INF_EQ, SUP_EQ, '+', '-', '*', '/', '%', ')', DIFT, '<', '>', '\n', ',']
   40    | EXP • SUP_EQ EXP
   41    | EXP • DIFT EXP
   42    | EXP • ET EXP
   43    | EXP • OU EXP

    ET  shift, and go to state 47
    OU  shift, and go to state 48

    $default  reduce using rule 39 (EXP)


State 54

   32 EXP: EXP • '+' EXP
   33    | EXP • '-' EXP
   34    | EXP • '*' EXP
   35    | EXP • '/' EXP
   36    | EXP • '%' EXP
   37    | EXP • '<' EXP
   38    | EXP • '>' EXP
   39    | EXP • INF_EQ EXP
   40    | EXP • SUP_EQ EXP
   40    | EXP SUP_EQ EXP •  [ALORS, FAIRE, INF_EQ, SUP_EQ, '+', '-', '*', '/', '%', ')', DIFT, '<', '>', '\n', ',']
   41    | EXP • DIFT EXP
   42    | EXP • ET EXP
   43    | EXP • OU EXP

    ET  shift, and go to state 47
    OU  shift, and go to state 48

    $default  reduce using rule 40 (EXP)


State 55

   32 EXP: EXP • '+' EXP
   32    | EXP '+' EXP •  [ALORS, FAIRE, '+', '-', ')', '\n', ',']
   33    | EXP • '-' EXP
   34    | EXP • '*' EXP
   35    | EXP • '/' EXP
   36    | EXP • '%' EXP
   37    | EXP • '<' EXP
   38    | EXP • '>' EXP
   39    | EXP • INF_EQ EXP
   40    | EXP • SUP_EQ EXP
   41    | EXP • DIFT EXP
   42    | EXP • ET EXP
   43    | EXP • OU EXP

    INF_EQ  shift, and go to state 37
    SUP_EQ  shift, and go to state 38
    '*'     shift, and go to state 41
    '/'     shift, and go to state 42
    '%'     shift, and go to state 43
    DIFT    shift, and go to state 44
    '<'     shift, and go to state 45
    '>'     shift, and go to state 46
    ET      shift, and go to state 47
    OU      shift, and go to state 48

    $default  reduce using rule 32 (EXP)


State 56

   32 EXP: EXP • '+' EXP
   33    | EXP • '-' EXP
   33    | EXP '-' EXP •  [ALORS, FAIRE, '+', '-', ')', '\n', ',']
   34    | EXP • '*' EXP
   35    | EXP • '/' EXP
   36    | EXP • '%' EXP
   37    | EXP • '<' EXP
   38    | EXP • '>' EXP
   39    | EXP • INF_EQ EXP
   40    | EXP • SUP_EQ EXP
   41    | EXP • DIFT EXP
   42    | EXP • ET EXP
   43    | EXP • OU EXP

    INF_EQ  shift, and go to state 37
    SUP_EQ  shift, and go to state 38
    '*'     shift, and go to state 41
    '/'     shift, and go to state 42
    '%'     shift, and go to state 43
    DIFT    shift, and go to state 44
    '<'     shift, and go to state 45
    '>'     shift, and go to state 46
    ET      shift, and go to state 47
    OU      shift, and go to state 48

    $default  reduce using rule 33 (EXP)


State 57

   32 EXP: EXP • '+' EXP
   33    | EXP • '-' EXP
   34    | EXP • '*' EXP
   34    | EXP '*' EXP •  [ALORS, FAIRE, '+', '-', '*', '/', '%', ')', '\n', ',']
   35    | EXP • '/' EXP
   36    | EXP • '%' EXP
   37    | EXP • '<' EXP
   38    | EXP • '>' EXP
   39    | EXP • INF_EQ EXP
   40    | EXP • SUP_EQ EXP
   41    | EXP • DIFT EXP
   42    | EXP • ET EXP
   43    | EXP • OU EXP

    INF_EQ  shift, and go to state 37
    SUP_EQ  shift, and go to state 38
    DIFT    shift, and go to state 44
    '<'     shift, and go to state 45
    '>'     shift, and go to state 46
    ET      shift, and go to state 47
    OU      shift, and go to state 48

    $default  reduce using rule 34 (EXP)


State 58

   32 EXP: EXP • '+' EXP
   33    | EXP • '-' EXP
   34    | EXP • '*' EXP
   35    | EXP • '/' EXP
   35    | EXP '/' EXP •  [ALORS, FAIRE, '+', '-', '*', '/', '%', ')', '\n', ',']
   36    | EXP • '%' EXP
   37    | EXP • '<' EXP
   38    | EXP • '>' EXP
   39    | EXP • INF_EQ EXP
   40    | EXP • SUP_EQ EXP
   41    | EXP • DIFT EXP
   42    | EXP • ET EXP
   43    | EXP • OU EXP

    INF_EQ  shift, and go to state 37
    SUP_EQ  shift, and go to state 38
    DIFT    shift, and go to state 44
    '<'     shift, and go to state 45
    '>'     shift, and go to state 46
    ET      shift, and go to state 47
    OU      shift, and go to state 48

    $default  reduce using rule 35 (EXP)


State 59

   32 EXP: EXP • '+' EXP
   33    | EXP • '-' EXP
   34    | EXP • '*' EXP
   35    | EXP • '/' EXP
   36    | EXP • '%' EXP
   36    | EXP '%' EXP •  [ALORS, FAIRE, '+', '-', '*', '/', '%', ')', '\n', ',']
   37    | EXP • '<' EXP
   38    | EXP • '>' EXP
   39    | EXP • INF_EQ EXP
   40    | EXP • SUP_EQ EXP
   41    | EXP • DIFT EXP
   42    | EXP • ET EXP
   43    | EXP • OU EXP

    INF_EQ  shift, and go to state 37
    SUP_EQ  shift, and go to state 38
    DIFT    shift, and go to state 44
    '<'     shift, and go to state 45
    '>'     shift, and go to state 46
    ET      shift, and go to state 47
    OU      shift, and go to state 48

    $default  reduce using rule 36 (EXP)


State 60

   32 EXP: EXP • '+' EXP
   33    | EXP • '-' EXP
   34    | EXP • '*' EXP
   35    | EXP • '/' EXP
   36    | EXP • '%' EXP
   37    | EXP • '<' EXP
   38    | EXP • '>' EXP
   39    | EXP • INF_EQ EXP
   40    | EXP • SUP_EQ EXP
   41    | EXP • DIFT EXP
   41    | EXP DIFT EXP •  [ALORS, FAIRE, INF_EQ, SUP_EQ, '+', '-', '*', '/', '%', ')', DIFT, '<', '>', '\n', ',']
   42    | EXP • ET EXP
   43    | EXP • OU EXP

    ET  shift, and go to state 47
    OU  shift, and go to state 48

    $default  reduce using rule 41 (EXP)


State 61

   32 EXP: EXP • '+' EXP
   33    | EXP • '-' EXP
   34    | EXP • '*' EXP
   35    | EXP • '/' EXP
   36    | EXP • '%' EXP
   37    | EXP • '<' EXP
   37    | EXP '<' EXP •  [ALORS, FAIRE, INF_EQ, SUP_EQ, '+', '-', '*', '/', '%', ')', DIFT, '<', '>', '\n', ',']
   38    | EXP • '>' EXP
   39    | EXP • INF_EQ EXP
   40    | EXP • SUP_EQ EXP
   41    | EXP • DIFT EXP
   42    | EXP • ET EXP
   43    | EXP • OU EXP

    ET  shift, and go to state 47
    OU  shift, and go to state 48

    $default  reduce using rule 37 (EXP)


State 62

   32 EXP: EXP • '+' EXP
   33    | EXP • '-' EXP
   34    | EXP • '*' EXP
   35    | EXP • '/' EXP
   36    | EXP • '%' EXP
   37    | EXP • '<' EXP
   38    | EXP • '>' EXP
   38    | EXP '>' EXP •  [ALORS, FAIRE, INF_EQ, SUP_EQ, '+', '-', '*', '/', '%', ')', DIFT, '<', '>', '\n', ',']
   39    | EXP • INF_EQ EXP
   40    | EXP • SUP_EQ EXP
   41    | EXP • DIFT EXP
   42    | EXP • ET EXP
   43    | EXP • OU EXP

    ET  shift, and go to state 47
    OU  shift, and go to state 48

    $default  reduce using rule 38 (EXP)


State 63

   32 EXP: EXP • '+' EXP
   33    | EXP • '-' EXP
   34    | EXP • '*' EXP
   35    | EXP • '/' EXP
   36    | EXP • '%' EXP
   37    | EXP • '<' EXP
   38    | EXP • '>' EXP
   39    | EXP • INF_EQ EXP
   40    | EXP • SUP_EQ EXP
   41    | EXP • DIFT EXP
   42    | EXP • ET EXP
   42    | EXP ET EXP •  [ALORS, FAIRE, INF_EQ, SUP_EQ, '+', '-', '*', '/', '%', ')', DIFT, '<', '>', ET, OU, '\n', ',']
   43    | EXP • OU EXP

    $default  reduce using rule 42 (EXP)


State 64

   32 EXP: EXP • '+' EXP
   33    | EXP • '-' EXP
   34    | EXP • '*' EXP
   35    | EXP • '/' EXP
   36    | EXP • '%' EXP
   37    | EXP • '<' EXP
   38    | EXP • '>' EXP
   39    | EXP • INF_EQ EXP
   40    | EXP • SUP_EQ EXP
   41    | EXP • DIFT EXP
   42    | EXP • ET EXP
   43    | EXP • OU EXP
   43    | EXP OU EXP •  [ALORS, FAIRE, INF_EQ, SUP_EQ, '+', '-', '*', '/', '%', ')', DIFT, '<', '>', ET, OU, '\n', ',']

    $default  reduce using rule 43 (EXP)


State 65

   19 LIST_ID: ID "<-" EXP ',' LIST_ID •

    $default  reduce using rule 19 (LIST_ID)


State 66

    4 SEP: SEP • '\n'
   12 DECLA_FCT: ALGO ID '(' L_PARAM ')' SEP • LIST_DECLA_VAR DEBUT SEP LIST_INSTS FIN SEP

    VAR   shift, and go to state 1
    '\n'  shift, and go to state 31

    $default  reduce using rule 13 (LIST_DECLA_VAR)

    LIST_DECLA_VAR  go to state 69
    DECLA_VAR       go to state 68


State 67

    2 PROG: PROGRAMME '(' ')' SEP LIST_DECLA_VAR • DEBUT SEP LIST_INSTS FIN EOP

    DEBUT  shift, and go to state 70


State 68

   14 LIST_DECLA_VAR: DECLA_VAR • LIST_DECLA_VAR

    VAR  shift, and go to state 1

    $default  reduce using rule 13 (LIST_DECLA_VAR)

    LIST_DECLA_VAR  go to state 71
    DECLA_VAR       go to state 68


State 69

   12 DECLA_FCT: ALGO ID '(' L_PARAM ')' SEP LIST_DECLA_VAR • DEBUT SEP LIST_INSTS FIN SEP

    DEBUT  shift, and go to state 72


State 70

    2 PROG: PROGRAMME '(' ')' SEP LIST_DECLA_VAR DEBUT • SEP LIST_INSTS FIN EOP

    '\n'  shift, and go to state 17

    SEP  go to state 73


State 71

   14 LIST_DECLA_VAR: DECLA_VAR LIST_DECLA_VAR •

    $default  reduce using rule 14 (LIST_DECLA_VAR)


State 72

   12 DECLA_FCT: ALGO ID '(' L_PARAM ')' SEP LIST_DECLA_VAR DEBUT • SEP LIST_INSTS FIN SEP

    '\n'  shift, and go to state 17

    SEP  go to state 74


State 73

    2 PROG: PROGRAMME '(' ')' SEP LIST_DECLA_VAR DEBUT SEP • LIST_INSTS FIN EOP
    4 SEP: SEP • '\n'

    NB       shift, and go to state 21
    ID       shift, and go to state 75
    SI       shift, and go to state 76
    TQ       shift, and go to state 77
    B_TRUE   shift, and go to state 23
    B_FALSE  shift, and go to state 24
    LIRE     shift, and go to state 25
    ECRIRE   shift, and go to state 26
    '('      shift, and go to state 27
    NON      shift, and go to state 28
    '\n'     shift, and go to state 31

    LIST_INSTS   go to state 78
    INST         go to state 79
    BOUCLE       go to state 80
    COND         go to state 81
    AFFECTATION  go to state 82
    EXP          go to state 83


State 74

    4 SEP: SEP • '\n'
   12 DECLA_FCT: ALGO ID '(' L_PARAM ')' SEP LIST_DECLA_VAR DEBUT SEP • LIST_INSTS FIN SEP

    NB       shift, and go to state 21
    ID       shift, and go to state 75
    SI       shift, and go to state 76
    TQ       shift, and go to state 77
    B_TRUE   shift, and go to state 23
    B_FALSE  shift, and go to state 24
    LIRE     shift, and go to state 25
    ECRIRE   shift, and go to state 26
    '('      shift, and go to state 27
    NON      shift, and go to state 28
    '\n'     shift, and go to state 31

    LIST_INSTS   go to state 84
    INST         go to state 79
    BOUCLE       go to state 80
    COND         go to state 81
    AFFECTATION  go to state 82
    EXP          go to state 83


State 75

   29 AFFECTATION: ID • "<-" EXP SEP
   30            | ID • "<-" AFFECTATION
   46 EXP: ID •  [INF_EQ, SUP_EQ, '+', '-', '*', '/', '%', DIFT, '<', '>', ET, OU, '\n']

    "<-"  shift, and go to state 85

    $default  reduce using rule 46 (EXP)


State 76

   27 COND: SI • EXP ALORS LIST_INSTS SINON LIST_INSTS FSI
   28     | SI • EXP ALORS LIST_INSTS FSI

    NB       shift, and go to state 21
    ID       shift, and go to state 22
    B_TRUE   shift, and go to state 23
    B_FALSE  shift, and go to state 24
    LIRE     shift, and go to state 25
    ECRIRE   shift, and go to state 26
    '('      shift, and go to state 27
    NON      shift, and go to state 28

    EXP  go to state 86


State 77

   26 BOUCLE: TQ • EXP FAIRE LIST_INSTS FTQ

    NB       shift, and go to state 21
    ID       shift, and go to state 22
    B_TRUE   shift, and go to state 23
    B_FALSE  shift, and go to state 24
    LIRE     shift, and go to state 25
    ECRIRE   shift, and go to state 26
    '('      shift, and go to state 27
    NON      shift, and go to state 28

    EXP  go to state 87


State 78

    2 PROG: PROGRAMME '(' ')' SEP LIST_DECLA_VAR DEBUT SEP LIST_INSTS • FIN EOP

    FIN  shift, and go to state 88


State 79

   20 LIST_INSTS: INST • SEP
   21           | INST • SEP LIST_INSTS

    '\n'  shift, and go to state 17

    SEP  go to state 89


State 80

   23 INST: BOUCLE •

    $default  reduce using rule 23 (INST)


State 81

   24 INST: COND •

    $default  reduce using rule 24 (INST)


State 82

   25 INST: AFFECTATION •

    $default  reduce using rule 25 (INST)


State 83

   22 INST: EXP • SEP
   32 EXP: EXP • '+' EXP
   33    | EXP • '-' EXP
   34    | EXP • '*' EXP
   35    | EXP • '/' EXP
   36    | EXP • '%' EXP
   37    | EXP • '<' EXP
   38    | EXP • '>' EXP
   39    | EXP • INF_EQ EXP
   40    | EXP • SUP_EQ EXP
   41    | EXP • DIFT EXP
   42    | EXP • ET EXP
   43    | EXP • OU EXP

    INF_EQ  shift, and go to state 37
    SUP_EQ  shift, and go to state 38
    '+'     shift, and go to state 39
    '-'     shift, and go to state 40
    '*'     shift, and go to state 41
    '/'     shift, and go to state 42
    '%'     shift, and go to state 43
    DIFT    shift, and go to state 44
    '<'     shift, and go to state 45
    '>'     shift, and go to state 46
    ET      shift, and go to state 47
    OU      shift, and go to state 48
    '\n'    shift, and go to state 17

    SEP  go to state 90


State 84

   12 DECLA_FCT: ALGO ID '(' L_PARAM ')' SEP LIST_DECLA_VAR DEBUT SEP LIST_INSTS • FIN SEP

    FIN  shift, and go to state 91


State 85

   29 AFFECTATION: ID "<-" • EXP SEP
   30            | ID "<-" • AFFECTATION

    NB       shift, and go to state 21
    ID       shift, and go to state 75
    B_TRUE   shift, and go to state 23
    B_FALSE  shift, and go to state 24
    LIRE     shift, and go to state 25
    ECRIRE   shift, and go to state 26
    '('      shift, and go to state 27
    NON      shift, and go to state 28

    AFFECTATION  go to state 92
    EXP          go to state 93


State 86

   27 COND: SI EXP • ALORS LIST_INSTS SINON LIST_INSTS FSI
   28     | SI EXP • ALORS LIST_INSTS FSI
   32 EXP: EXP • '+' EXP
   33    | EXP • '-' EXP
   34    | EXP • '*' EXP
   35    | EXP • '/' EXP
   36    | EXP • '%' EXP
   37    | EXP • '<' EXP
   38    | EXP • '>' EXP
   39    | EXP • INF_EQ EXP
   40    | EXP • SUP_EQ EXP
   41    | EXP • DIFT EXP
   42    | EXP • ET EXP
   43    | EXP • OU EXP

    ALORS   shift, and go to state 94
    INF_EQ  shift, and go to state 37
    SUP_EQ  shift, and go to state 38
    '+'     shift, and go to state 39
    '-'     shift, and go to state 40
    '*'     shift, and go to state 41
    '/'     shift, and go to state 42
    '%'     shift, and go to state 43
    DIFT    shift, and go to state 44
    '<'     shift, and go to state 45
    '>'     shift, and go to state 46
    ET      shift, and go to state 47
    OU      shift, and go to state 48


State 87

   26 BOUCLE: TQ EXP • FAIRE LIST_INSTS FTQ
   32 EXP: EXP • '+' EXP
   33    | EXP • '-' EXP
   34    | EXP • '*' EXP
   35    | EXP • '/' EXP
   36    | EXP • '%' EXP
   37    | EXP • '<' EXP
   38    | EXP • '>' EXP
   39    | EXP • INF_EQ EXP
   40    | EXP • SUP_EQ EXP
   41    | EXP • DIFT EXP
   42    | EXP • ET EXP
   43    | EXP • OU EXP

    FAIRE   shift, and go to state 95
    INF_EQ  shift, and go to state 37
    SUP_EQ  shift, and go to state 38
    '+'     shift, and go to state 39
    '-'     shift, and go to state 40
    '*'     shift, and go to state 41
    '/'     shift, and go to state 42
    '%'     shift, and go to state 43
    DIFT    shift, and go to state 44
    '<'     shift, and go to state 45
    '>'     shift, and go to state 46
    ET      shift, and go to state 47
    OU      shift, and go to state 48


State 88

    2 PROG: PROGRAMME '(' ')' SEP LIST_DECLA_VAR DEBUT SEP LIST_INSTS FIN • EOP

    '\n'  shift, and go to state 17

    $default  reduce using rule 5 (EOP)

    SEP  go to state 96
    EOP  go to state 97


State 89

    4 SEP: SEP • '\n'
   20 LIST_INSTS: INST SEP •  [FIN, SINON, FSI, FTQ]
   21           | INST SEP • LIST_INSTS

    NB       shift, and go to state 21
    ID       shift, and go to state 75
    SI       shift, and go to state 76
    TQ       shift, and go to state 77
    B_TRUE   shift, and go to state 23
    B_FALSE  shift, and go to state 24
    LIRE     shift, and go to state 25
    ECRIRE   shift, and go to state 26
    '('      shift, and go to state 27
    NON      shift, and go to state 28
    '\n'     shift, and go to state 31

    $default  reduce using rule 20 (LIST_INSTS)

    LIST_INSTS   go to state 98
    INST         go to state 79
    BOUCLE       go to state 80
    COND         go to state 81
    AFFECTATION  go to state 82
    EXP          go to state 83


State 90

    4 SEP: SEP • '\n'
   22 INST: EXP SEP •  ['\n']

    '\n'  shift, and go to state 31

    '\n'  [reduce using rule 22 (INST)]

    shift/reduce conflict on token '\n':
       22 INST: EXP SEP •
        4 SEP: SEP • '\n'
      Example: EXP SEP • '\n' '\n'
      Shift derivation
        LIST_INSTS
        ↳ 20: INST                      SEP
              ↳ 22: EXP SEP             ↳ 3: '\n'
                        ↳ 4: SEP • '\n'
      Reduce derivation
        LIST_INSTS
        ↳ 20: INST            SEP
              ↳ 22: EXP SEP • ↳ 4: SEP       '\n'
                                   ↳ 3: '\n'



State 91

   12 DECLA_FCT: ALGO ID '(' L_PARAM ')' SEP LIST_DECLA_VAR DEBUT SEP LIST_INSTS FIN • SEP

    '\n'  shift, and go to state 17

    SEP  go to state 99


State 92

   30 AFFECTATION: ID "<-" AFFECTATION •

    $default  reduce using rule 30 (AFFECTATION)


State 93

   29 AFFECTATION: ID "<-" EXP • SEP
   32 EXP: EXP • '+' EXP
   33    | EXP • '-' EXP
   34    | EXP • '*' EXP
   35    | EXP • '/' EXP
   36    | EXP • '%' EXP
   37    | EXP • '<' EXP
   38    | EXP • '>' EXP
   39    | EXP • INF_EQ EXP
   40    | EXP • SUP_EQ EXP
   41    | EXP • DIFT EXP
   42    | EXP • ET EXP
   43    | EXP • OU EXP

    INF_EQ  shift, and go to state 37
    SUP_EQ  shift, and go to state 38
    '+'     shift, and go to state 39
    '-'     shift, and go to state 40
    '*'     shift, and go to state 41
    '/'     shift, and go to state 42
    '%'     shift, and go to state 43
    DIFT    shift, and go to state 44
    '<'     shift, and go to state 45
    '>'     shift, and go to state 46
    ET      shift, and go to state 47
    OU      shift, and go to state 48
    '\n'    shift, and go to state 17

    SEP  go to state 100


State 94

   27 COND: SI EXP ALORS • LIST_INSTS SINON LIST_INSTS FSI
   28     | SI EXP ALORS • LIST_INSTS FSI

    NB       shift, and go to state 21
    ID       shift, and go to state 75
    SI       shift, and go to state 76
    TQ       shift, and go to state 77
    B_TRUE   shift, and go to state 23
    B_FALSE  shift, and go to state 24
    LIRE     shift, and go to state 25
    ECRIRE   shift, and go to state 26
    '('      shift, and go to state 27
    NON      shift, and go to state 28

    LIST_INSTS   go to state 101
    INST         go to state 79
    BOUCLE       go to state 80
    COND         go to state 81
    AFFECTATION  go to state 82
    EXP          go to state 83


State 95

   26 BOUCLE: TQ EXP FAIRE • LIST_INSTS FTQ

    NB       shift, and go to state 21
    ID       shift, and go to state 75
    SI       shift, and go to state 76
    TQ       shift, and go to state 77
    B_TRUE   shift, and go to state 23
    B_FALSE  shift, and go to state 24
    LIRE     shift, and go to state 25
    ECRIRE   shift, and go to state 26
    '('      shift, and go to state 27
    NON      shift, and go to state 28

    LIST_INSTS   go to state 102
    INST         go to state 79
    BOUCLE       go to state 80
    COND         go to state 81
    AFFECTATION  go to state 82
    EXP          go to state 83


State 96

    4 SEP: SEP • '\n'
    6 EOP: SEP •  [$end]

    '\n'  shift, and go to state 31

    $default  reduce using rule 6 (EOP)


State 97

    2 PROG: PROGRAMME '(' ')' SEP LIST_DECLA_VAR DEBUT SEP LIST_INSTS FIN EOP •

    $default  reduce using rule 2 (PROG)


State 98

   21 LIST_INSTS: INST SEP LIST_INSTS •

    $default  reduce using rule 21 (LIST_INSTS)


State 99

    4 SEP: SEP • '\n'
   12 DECLA_FCT: ALGO ID '(' L_PARAM ')' SEP LIST_DECLA_VAR DEBUT SEP LIST_INSTS FIN SEP •  [VAR, ALGO, PROGRAMME]

    '\n'  shift, and go to state 31

    $default  reduce using rule 12 (DECLA_FCT)


State 100

    4 SEP: SEP • '\n'
   29 AFFECTATION: ID "<-" EXP SEP •  ['\n']

    '\n'  shift, and go to state 31

    '\n'  [reduce using rule 29 (AFFECTATION)]

    shift/reduce conflict on token '\n':
       29 AFFECTATION: ID "<-" EXP SEP •
        4 SEP: SEP • '\n'
      Example: ID "<-" EXP SEP • '\n' '\n'
      Shift derivation
        LIST_INSTS
        ↳ 20: INST                                    SEP
              ↳ 25: AFFECTATION                       ↳ 3: '\n'
                    ↳ 29: ID "<-" EXP SEP
                                      ↳ 4: SEP • '\n'
      Reduce derivation
        LIST_INSTS
        ↳ 20: INST                          SEP
              ↳ 25: AFFECTATION             ↳ 4: SEP       '\n'
                    ↳ 29: ID "<-" EXP SEP •      ↳ 3: '\n'



State 101

   27 COND: SI EXP ALORS LIST_INSTS • SINON LIST_INSTS FSI
   28     | SI EXP ALORS LIST_INSTS • FSI

    SINON  shift, and go to state 103
    FSI    shift, and go to state 104


State 102

   26 BOUCLE: TQ EXP FAIRE LIST_INSTS • FTQ

    FTQ  shift, and go to state 105


State 103

   27 COND: SI EXP ALORS LIST_INSTS SINON • LIST_INSTS FSI

    NB       shift, and go to state 21
    ID       shift, and go to state 75
    SI       shift, and go to state 76
    TQ       shift, and go to state 77
    B_TRUE   shift, and go to state 23
    B_FALSE  shift, and go to state 24
    LIRE     shift, and go to state 25
    ECRIRE   shift, and go to state 26
    '('      shift, and go to state 27
    NON      shift, and go to state 28

    LIST_INSTS   go to state 106
    INST         go to state 79
    BOUCLE       go to state 80
    COND         go to state 81
    AFFECTATION  go to state 82
    EXP          go to state 83


State 104

   28 COND: SI EXP ALORS LIST_INSTS FSI •

    $default  reduce using rule 28 (COND)


State 105

   26 BOUCLE: TQ EXP FAIRE LIST_INSTS FTQ •

    $default  reduce using rule 26 (BOUCLE)


State 106

   27 COND: SI EXP ALORS LIST_INSTS SINON LIST_INSTS • FSI

    FSI  shift, and go to state 107


State 107

   27 COND: SI EXP ALORS LIST_INSTS SINON LIST_INSTS FSI •

    $default  reduce using rule 27 (COND)
